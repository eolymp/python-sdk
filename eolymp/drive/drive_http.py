# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-python-esdk for more details.
"""Generated protocol buffer code."""

import urllib.parse
from google.protobuf import symbol_database as _symbol_database

_sym_db = _symbol_database.Default()


class DriveClient:
    def __init__(self, transport, url="https://api.eolymp.com"):
        self.transport = transport
        self.url = url

    def DescribeFile(self, request, **kwargs):
        path = "/drive/files/"+urllib.parse.quote(request.file_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.file_id = ""

        return self.transport.request(
            method="GET",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.DescribeFileOutput"),
            **kwargs,
        )

    def ListFiles(self, request, **kwargs):
        path = "/drive/files"

        return self.transport.request(
            method="GET",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.ListFilesOutput"),
            **kwargs,
        )

    def CreateFile(self, request, **kwargs):
        path = "/drive/files"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.CreateFileOutput"),
            **kwargs,
        )

    def UpdateFile(self, request, **kwargs):
        path = "/drive/files/"+urllib.parse.quote(request.file_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.file_id = ""

        return self.transport.request(
            method="PUT",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.UpdateFileOutput"),
            **kwargs,
        )

    def DeleteFile(self, request, **kwargs):
        path = "/drive/files/"+urllib.parse.quote(request.file_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.file_id = ""

        return self.transport.request(
            method="DELETE",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.DeleteFileOutput"),
            **kwargs,
        )

    def StartMultipartUpload(self, request, **kwargs):
        path = "/drive/uploads"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.StartMultipartUploadOutput"),
            **kwargs,
        )

    def UploadPart(self, request, **kwargs):
        path = "/drive/uploads/"+urllib.parse.quote(request.upload_id)+"/parts"

        # Cleanup URL parameters to avoid any ambiguity
        request.upload_id = ""

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.UploadPartOutput"),
            **kwargs,
        )

    def CompleteMultipartUpload(self, request, **kwargs):
        path = "/drive/uploads/"+urllib.parse.quote(request.upload_id)+"/complete"

        # Cleanup URL parameters to avoid any ambiguity
        request.upload_id = ""

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.drive.CompleteMultipartUploadOutput"),
            **kwargs,
        )

