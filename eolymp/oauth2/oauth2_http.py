# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-python-esdk for more details.
"""Generated protocol buffer code."""

import urllib.parse
from google.protobuf import symbol_database as _symbol_database

_sym_db = _symbol_database.Default()


class OAuth2Client:
    def __init__(self, transport, url="https://api.eolymp.com"):
        self.transport = transport
        self.url = url

    def Token(self, request, **kwargs):
        path = "/oauth2/token"

        return self.transport.request(
            name="eolymp.oauth2.OAuth2/Token",
            method="POST",
            url=self.url+path,
            path=path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.oauth2.TokenOutput"),
            **kwargs,
        )

    def Authorize(self, request, **kwargs):
        path = "/oauth2/authorize"

        return self.transport.request(
            name="eolymp.oauth2.OAuth2/Authorize",
            method="GET",
            url=self.url+path,
            path=path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.oauth2.AuthorizeOutput"),
            **kwargs,
        )

    def Callback(self, request, **kwargs):
        path = "/oauth2/callback"

        return self.transport.request(
            name="eolymp.oauth2.OAuth2/Callback",
            method="GET",
            url=self.url+path,
            path=path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.oauth2.CallbackOutput"),
            **kwargs,
        )

    def UserInfo(self, request, **kwargs):
        path = "/oauth2/userinfo"

        return self.transport.request(
            name="eolymp.oauth2.OAuth2/UserInfo",
            method="GET",
            url=self.url+path,
            path=path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.oauth2.UserInfoOutput"),
            **kwargs,
        )

