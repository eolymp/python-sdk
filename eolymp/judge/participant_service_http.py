# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler. DO NOT EDIT!
# See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-python-esdk for more details.
"""Generated protocol buffer code."""

import urllib.parse
from google.protobuf import symbol_database as _symbol_database

_sym_db = _symbol_database.Default()


class ParticipantServiceClient:
    def __init__(self, transport, url="https://api.eolymp.com"):
        self.transport = transport
        self.url = url

    def AddParticipant(self, request, **kwargs):
        path = "/participants"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.AddParticipantOutput"),
            **kwargs,
        )

    def EnableParticipant(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)+"/enable"

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.EnableParticipantOutput"),
            **kwargs,
        )

    def DisableParticipant(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)+"/disable"

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.DisableParticipantOutput"),
            **kwargs,
        )

    def UpdateParticipant(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="PUT",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.UpdateParticipantOutput"),
            **kwargs,
        )

    def RemoveParticipant(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="DELETE",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.RemoveParticipantOutput"),
            **kwargs,
        )

    def ListParticipants(self, request, **kwargs):
        path = "/participants"

        return self.transport.request(
            method="GET",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.ListParticipantsOutput"),
            **kwargs,
        )

    def DescribeParticipant(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="GET",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.DescribeParticipantOutput"),
            **kwargs,
        )

    def IntrospectParticipant(self, request, **kwargs):
        path = "/introspect"

        return self.transport.request(
            method="GET",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.IntrospectParticipantOutput"),
            **kwargs,
        )

    def JoinContest(self, request, **kwargs):
        path = "/join"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.JoinContestOutput"),
            **kwargs,
        )

    def StartContest(self, request, **kwargs):
        path = "/start"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.StartContestOutput"),
            **kwargs,
        )

    def VerifyPasscode(self, request, **kwargs):
        path = "/verify-passcode"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.VerifyPasscodeOutput"),
            **kwargs,
        )

    def EnterPasscode(self, request, **kwargs):
        path = "/enter-passcode"

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.EnterPasscodeOutput"),
            **kwargs,
        )

    def ResetPasscode(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)+"/passcode"

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="POST",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.ResetPasscodeOutput"),
            **kwargs,
        )

    def SetPasscode(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)+"/passcode"

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="PUT",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.SetPasscodeOutput"),
            **kwargs,
        )

    def RemovePasscode(self, request, **kwargs):
        path = "/participants/"+urllib.parse.quote(request.participant_id)+"/passcode"

        # Cleanup URL parameters to avoid any ambiguity
        request.participant_id = ""

        return self.transport.request(
            method="DELETE",
            url=self.url+path,
            request_data=request,
            response_symbol=_sym_db.GetSymbol("eolymp.judge.RemovePasscodeOutput"),
            **kwargs,
        )

